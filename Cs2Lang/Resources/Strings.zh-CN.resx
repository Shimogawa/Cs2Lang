<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CleanupOption" xml:space="preserve">
    <value>不清理产生的文件。</value>
  </data>
  <data name="ErrorInDump" xml:space="preserve">
    <value>解包失败。检查文件异常。</value>
  </data>
  <data name="FileCleanedUp" xml:space="preserve">
    <value>清理文件完成。</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>文件未找到：{0}</value>
  </data>
  <data name="FolderNotFound" xml:space="preserve">
    <value>文件夹未找到：{0}</value>
  </data>
  <data name="FromJsonOption" xml:space="preserve">
    <value>从指定的json文件夹导入而非Mod文件导入（json文件夹名称需要与Mod命名空间相同）</value>
  </data>
  <data name="HelpOption" xml:space="preserve">
    <value>显示帮助。</value>
  </data>
  <data name="LogOption" xml:space="preserve">
    <value>将不删除当前ModLocalizer产生的log文件。</value>
  </data>
  <data name="NoCleanupMode" xml:space="preserve">
    <value>将不清理产生的文件。</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>输出：</value>
  </data>
  <data name="PathArgument" xml:space="preserve">
    <value>Mod文件或Json文件夹</value>
  </data>
  <data name="PathArgumentDetail" xml:space="preserve">
    <value>格式：[Mod文件路径或Json文件夹路径] [Mod命名空间名称（无空格）]</value>
  </data>
  <data name="ProcessKilled" xml:space="preserve">
    <value>已强行终止外部程序的运行！可能发生错误！解包失败！</value>
  </data>
  <data name="ProgramDetail" xml:space="preserve">
    <value>
关于这个软件
-----------------------------
核心使用了Mod.Localizer v0.2。保证这个文件夹与此程序在一起。
这个程序是对ModLocalizer的包装，将生成的.json文件转换为.lang文件。</value>
  </data>
  <data name="ProgramInfo" xml:space="preserve">
    <value>Cs2Lang  版本{0}</value>
  </data>
  <data name="ReplaceOption" xml:space="preserve">
    <value>用指定文件中的词语和句子替换.lang文件中的。</value>
  </data>
  <data name="SpecificPath" xml:space="preserve">
    <value>请指定Mod文件路径和Mod命名空间名称。
格式为：.\Cs2Lang.exe mod_path mod_namespace_name</value>
  </data>
  <data name="VersionOption" xml:space="preserve">
    <value>显示版本信息。</value>
  </data>
  <data name="WrongArgument" xml:space="preserve">
    <value>参数错误。</value>
  </data>
</root>